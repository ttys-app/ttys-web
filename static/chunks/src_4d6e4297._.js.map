{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/michael/projects/ttys/src/appConfig.js"],"sourcesContent":["import { getTranslationClient } from './app/i18n/client';\n\nexport const DEV = process.env.NODE_ENV === 'development'\n\n// 基本配置，不依赖国际化\nexport const appSecret = 'A1CfWF1tN7SCgOZa'\nexport const contactEmail = 'support@ttys.app'\nexport const cryptMode = 'g' // rc4 || g\n\n// 样式配置\nexport const THEME_COLOR = 'rgb(9,161,228)'\nexport const ACTION_BTN_COLOR = 'rgb(9,161,228)'\nexport const CENTER_BTN_COLOR = 'rgb(9,161,228)'\n\n// seo\nexport const OG_LOCALE = {\n  cn: 'zh_CN',\n  tw: 'zh_TW',\n  en: 'en_US',\n  ja: 'ja_JP',\n  ko: 'ko_KR',\n}\n\n// 网络配置\nexport const ENCRYPT = DEV ? 0 : 1\nexport const FETCH_TIME_OUT = 10000\nexport const WEB_LINK = 'https://ttys.app'\nexport const SHARE_LINK = 'https://ttys.app'\n// 平台下载链接\nexport const IOS_APP_STORE_ID = ''\nexport const IOS_DOWNLOAD_LINK = 'https://apps.apple.com/app/com.ttys' \n\nexport const ANDROID_PACKAGE = 'com.ttys'\n// export const ANDROID_DOWNLOAD_LINK = 'https://play.google.com/store/apps/details?id=com.ttys'\nexport const ANDROID_DOWNLOAD_LINK = 'https://assets.ttys.app/app.apk'\n\nexport const DOWNLOAD_LINK = 'https://assets.ttys.app/app.apk' // 通用下载页面，作为默认备选\n\nexport const LOCAL_PORT = 10000\nexport const ORIGIN = typeof DEV !== 'undefined' && DEV ? 'http://192.168.1.101:6061/v1' : 'https://api.ttys.app/v1'\nexport const FILE_ORIGIN = typeof DEV !== 'undefined' && DEV ? 'http://192.168.1.101:6062/v1' : 'https://api2.ttys.app/v1'\nexport const MINIO_ORIGIN = typeof DEV !== 'undefined' && DEV ? 'http://192.168.1.101:9000/v1' : 'https://api.ttys.app/v1'\n\n// 获取多语言配置 - 客户端版本\nexport function getConfig(locale) {\n  // 获取翻译函数\n  const { t } = getTranslationClient(locale);\n  \n  return {\n    appName: t('config_app_name'),\n\n    YEAR: t('general_years'),\n    \n    CATEGORY_TYPE: {\n      '0': t('category_type'),\n      '1': t('category_region'),\n      '2': t('category_year'),\n      '3': t('category_all'),\n    },\n    \n    ART_TYPE: {\n      '0': t('artTypeFilm'),\n      '1': t('artTypeTeleplay'),\n      '2': t('artTypeEntertainment'),\n      '3': t('artTypeVariety'),\n      '4': t('artTypeNews'),\n    },\n    \n    CONTENT_TYPE: {\n      '0': t('contentTypePlot'),\n      '1': t('contentTypeComedy'),\n      '2': t('contentTypeAction'),\n      '3': t('contentTypeRomance'),\n      '4': t('contentTypeScienceFiction'),\n      '5': t('contentTypeCartoon'),\n      '6': t('contentTypeSuspense'),\n      '7': t('contentTypeThriller'),\n      '8': t('contentTypeHorror'),\n      '9': t('contentTypeCrime'),\n      '10': t('contentTypeHomosexual'),\n      '11': t('contentTypeMusic'),\n      '12': t('contentTypeDance'),\n      '13': t('contentTypeBiopic'),\n      '14': t('contentTypeHistorical'),\n      '15': t('contentTypeWar'),\n      '16': t('contentTypeWestward'),\n      '17': t('contentTypeMagical'),\n      '18': t('contentTypeAdventure'),\n      '19': t('contentTypeDisaster'),\n      '20': t('contentTypeMartialArts'),\n      '21': t('contentTypeOthers'),\n    },\n    \n    REELS_CONTENT_TYPE: {\n      '0': t('reelsContentTypeUrban'),\n      '1': t('reelsContentTypeTraverse'),\n      '2': t('reelsContentTypeRebirth'),\n      '3': t('reelsContentTypeWarGod'),\n      '4': t('reelsContentTypeFantasy'),\n      '5': t('reelsContentTypeOverlord'),\n      '6': t('reelsContentTypeTorturedLove'),\n      '7': t('reelsContentTypeBaby'),\n      '8': t('reelsContentTypeCostume'),\n      '9': t('reelsContentTypeDivineHealer'),\n      '10': t('reelsContentTypeFemale'),\n      '11': t('reelsContentTypeMale'),\n      '12': t('reelsContentTypeHeir'),\n      '13': t('reelsContentTypeRepublic'),\n      '14': t('reelsContentTypeRise'),\n      '15': t('reelsContentTypeRomance'),\n      '16': t('reelsContentTypeHistory'),\n      '17': t('reelsContentTypeSweet'),\n      '18': t('reelsContentTypeRevenge'),\n      '19': t('reelsContentTypeFamily'),\n      '20': t('reelsContentTypeReality'),\n      '21': t('reelsContentTypeKinship'),\n      '22': t('reelsContentTypeFeeling'),\n      '23': t('reelsContentTypeFlashMarriage'),\n      '24': t('reelsContentTypeOthers'),\n    },\n    \n    AREA: {\n      '0': t('areaTypeChinaMainland'),\n      '1': t('areaTypeUnitedStates'),\n      '2': t('areaTypeHongKong'),\n      '3': t('areaTypeTaiwan'),\n      '4': t('areaTypeJapan'),\n      '5': t('areaTypeKorea'),\n      '6': t('areaTypeUnitedKingdom'),\n      '7': t('areaTypeFrance'),\n      '8': t('areaTypeGermany'),\n      '9': t('areaTypeItaly'),\n      '10': t('areaTypeSpain'),\n      '11': t('areaTypeIndia'),\n      '12': t('areaTypeThailand'),\n      '13': t('areaTypeRussia'),\n      '14': t('areaTypeIran'),\n      '15': t('areaTypeCanada'),\n      '16': t('areaTypeAustralia'),\n      '17': t('areaTypeIreland'),\n      '18': t('areaTypeSweden'),\n      '19': t('areaTypeBrazil'),\n      '20': t('areaTypeDenmark'),\n      '21': t('areaTypeOthers'),\n    },\n  };\n}\n\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAEmB;AAFnB;;AAEO,MAAM,MAAM,oDAAyB;AAGrC,MAAM,YAAY;AAClB,MAAM,eAAe;AACrB,MAAM,YAAY,IAAI,WAAW;;AAGjC,MAAM,cAAc;AACpB,MAAM,mBAAmB;AACzB,MAAM,mBAAmB;AAGzB,MAAM,YAAY;IACvB,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;AACN;AAGO,MAAM,UAAU,uCAAM;AACtB,MAAM,iBAAiB;AACvB,MAAM,WAAW;AACjB,MAAM,aAAa;AAEnB,MAAM,mBAAmB;AACzB,MAAM,oBAAoB;AAE1B,MAAM,kBAAkB;AAExB,MAAM,wBAAwB;AAE9B,MAAM,gBAAgB,kCAAkC,gBAAgB;;AAExE,MAAM,aAAa;AACnB,MAAM,SAAS,OAAO,QAAQ,eAAe,MAAM,iCAAiC;AACpF,MAAM,cAAc,OAAO,QAAQ,eAAe,MAAM,iCAAiC;AACzF,MAAM,eAAe,OAAO,QAAQ,eAAe,MAAM,iCAAiC;AAG1F,SAAS,UAAU,MAAM;IAC9B,SAAS;IACT,MAAM,EAAE,CAAC,EAAE,GAAG,CAAA,GAAA,+HAAA,CAAA,uBAAoB,AAAD,EAAE;IAEnC,OAAO;QACL,SAAS,EAAE;QAEX,MAAM,EAAE;QAER,eAAe;YACb,KAAK,EAAE;YACP,KAAK,EAAE;YACP,KAAK,EAAE;YACP,KAAK,EAAE;QACT;QAEA,UAAU;YACR,KAAK,EAAE;YACP,KAAK,EAAE;YACP,KAAK,EAAE;YACP,KAAK,EAAE;YACP,KAAK,EAAE;QACT;QAEA,cAAc;YACZ,KAAK,EAAE;YACP,KAAK,EAAE;YACP,KAAK,EAAE;YACP,KAAK,EAAE;YACP,KAAK,EAAE;YACP,KAAK,EAAE;YACP,KAAK,EAAE;YACP,KAAK,EAAE;YACP,KAAK,EAAE;YACP,KAAK,EAAE;YACP,MAAM,EAAE;YACR,MAAM,EAAE;YACR,MAAM,EAAE;YACR,MAAM,EAAE;YACR,MAAM,EAAE;YACR,MAAM,EAAE;YACR,MAAM,EAAE;YACR,MAAM,EAAE;YACR,MAAM,EAAE;YACR,MAAM,EAAE;YACR,MAAM,EAAE;YACR,MAAM,EAAE;QACV;QAEA,oBAAoB;YAClB,KAAK,EAAE;YACP,KAAK,EAAE;YACP,KAAK,EAAE;YACP,KAAK,EAAE;YACP,KAAK,EAAE;YACP,KAAK,EAAE;YACP,KAAK,EAAE;YACP,KAAK,EAAE;YACP,KAAK,EAAE;YACP,KAAK,EAAE;YACP,MAAM,EAAE;YACR,MAAM,EAAE;YACR,MAAM,EAAE;YACR,MAAM,EAAE;YACR,MAAM,EAAE;YACR,MAAM,EAAE;YACR,MAAM,EAAE;YACR,MAAM,EAAE;YACR,MAAM,EAAE;YACR,MAAM,EAAE;YACR,MAAM,EAAE;YACR,MAAM,EAAE;YACR,MAAM,EAAE;YACR,MAAM,EAAE;YACR,MAAM,EAAE;QACV;QAEA,MAAM;YACJ,KAAK,EAAE;YACP,KAAK,EAAE;YACP,KAAK,EAAE;YACP,KAAK,EAAE;YACP,KAAK,EAAE;YACP,KAAK,EAAE;YACP,KAAK,EAAE;YACP,KAAK,EAAE;YACP,KAAK,EAAE;YACP,KAAK,EAAE;YACP,MAAM,EAAE;YACR,MAAM,EAAE;YACR,MAAM,EAAE;YACR,MAAM,EAAE;YACR,MAAM,EAAE;YACR,MAAM,EAAE;YACR,MAAM,EAAE;YACR,MAAM,EAAE;YACR,MAAM,EAAE;YACR,MAAM,EAAE;YACR,MAAM,EAAE;YACR,MAAM,EAAE;QACV;IACF;AACF","debugId":null}},
    {"offset": {"line": 168, "column": 0}, "map": {"version":3,"sources":["file:///Users/michael/projects/ttys/src/app/utils/index.js"],"sourcesContent":["import CryptoES from 'crypto-es'\nimport {\n  FETCH_TIME_OUT,\n  appSecret,\n  cryptMode,\n} from '@/appConfig'\n\nexport const hasChinese = str => /[\\u4e00-\\u9fff]/.test(str)\n\nexport const sleep = delay => new Promise(resolve => setTimeout(resolve, delay))\n\nexport const encodeAes = str => {\n  const key = CryptoES.enc.Utf8.parse(appSecret)\n\n  const encryptedData = CryptoES.AES.encrypt(str, key, {\n    iv: key,\n    mode: CryptoES.mode.CBC,\n    padding: CryptoES.pad.Pkcs7,\n  })\n  return encryptedData.ciphertext.toString()\n}\n\nexport const decodeAes = str => {\n  const key = CryptoES.enc.Utf8.parse(appSecret);\n  const encryptedHexStr = CryptoES.enc.Hex.parse(str)\n  const encryptedBase64Str = CryptoES.enc.Base64.stringify(encryptedHexStr)\n\n  const decryptedData = CryptoES.AES.decrypt(encryptedBase64Str, key, {\n    iv: key,\n    mode: CryptoES.mode.CBC,\n    padding: CryptoES.pad.Pkcs7,\n  });\n\n  return decryptedData.toString(CryptoES.enc.Utf8)\n\n}\n\nexport const encodeRC4 = str => {\n  const key = CryptoES.enc.Utf8.parse(appSecret)\n  const encrypted = CryptoES.RC4.encrypt(str, key)\n  return encrypted.ciphertext.toString()\n}\n\nexport const decodeRC4 = str => {\n  const key = CryptoES.enc.Utf8.parse(appSecret)\n  const decrypted = CryptoES.RC4.decrypt(str, key)\n  return decrypted.toString(CryptoES.enc.Utf8)\n}\n\nexport const isObject = v => Object.prototype.toString.call(v) === '[object Object]'\nexport const isFormBody = v => v instanceof FormData\n\nexport const setStorage = async (key, value) => {\n  try {\n    if (!isObject(value)) {\n      throw new Error('[setStorage]: value must be \"object\"')\n    } else {\n      await localStorage.setItem(key, JSON.stringify(value))\n    }\n  } catch (err) {\n    console.error(`[setStorage]: ${err}`)\n    await Promise.reject(new Error(`[setStorage]: ${err}`))\n  }\n}\n\nexport const getStorage = async (key) => {\n  try {\n    const res = await localStorage.getItem(key)\n    if (res) {\n      return JSON.parse(res)\n    }\n  } catch (err) {\n    console.error(`[getStorage]: ${err}`)\n    await Promise.reject(new Error(`[getStorage]: ${err}`))\n  }\n}\n\nexport const clearStorageItem = async key => {\n  try {\n    await localStorage.removeItem(key)\n  } catch (err) {\n    console.error(`[removeItem]: ${err}`)\n    await Promise.reject(new Error(`[removeItem]: ${err}`))\n  }\n}\n\nexport const clearStorage = async () => {\n  try {\n    await localStorage.clear()\n  } catch (err) {\n    console.error(`[clearStorage]: ${err}`)\n    await Promise.reject(new Error(`[clearStorage]: ${err}`))\n  }\n}\n\n\nexport const getRandomElements = (arr, count) => {\n  if (!arr || !arr.length || !Array.isArray(arr)) return []\n  const shuffled = arr?.slice(0)\n  let i = arr.length\n  const min = i - count\n  let temp\n  let index\n  while (i -- > min) {\n    index = Math.floor((i + 1) * Math.random())\n    temp = shuffled[index]\n    shuffled[index] = shuffled[i]\n    shuffled[i] = temp\n  }\n  return shuffled?.slice(min)\n}\n\nexport const randomNumber = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min\n\nexport const shuffleArray = arr => {\n  let curId = arr.length\n  while (curId !== 0) {\n    const randId = Math.floor(Math.random() * curId)\n    curId -= 1\n    const tmp = arr[curId]\n    arr[curId] = arr[randId]\n    arr[randId] = tmp;\n  }\n  return arr\n}\n\nexport const allSettled = arr => {\n  if (!Promise.allSettled) {\n    return Promise.all(arr.map(p => Promise.resolve(p).then(res => res, error => error)))\n  } else {\n    return Promise.allSettled(arr)\n  }\n}\n\nconst buildUrl = (url, encrypt, secretKey) => {\n  const queryParams = encrypt\n    ? `c_m=${cryptMode}`\n    : `dev=1&ak=${secretKey}&c_m=${cryptMode}`\n  return `${url}${url.includes('?') ? '&' : '?'}${queryParams}`;\n};\n\nexport const fetchHandle = ({\n  url,\n  method = 'GET',\n  headers = {},\n  body = {},\n  token = '',\n  timeout = FETCH_TIME_OUT,\n  encrypt = 0,\n  secretKey = '',\n}, signal) => {\n  if (!url) throw new Error('Missing params: url');\n  const tokenStr = token ? `Bearer ${token}` : '';\n  const headersOpt = {\n    'Content-Type': 'application/json',\n    ...headers,\n    ...(tokenStr && { Authorization: tokenStr }),\n  };\n\n  const urlStr = buildUrl(url, encrypt, secretKey);\n\n  const isValidBody = ['POST', 'PUT', 'PATCH'].includes(method.toUpperCase()) && body && Object.keys(body).length;\n  \n  let bodyData;\n  if (isValidBody) {\n    if (encrypt) {\n      bodyData = encodeAes(JSON.stringify(body));\n    } else {\n      bodyData = JSON.stringify(body);\n    }\n  }\n\n  const fetchOptions = {\n    method,\n    headers: headersOpt,\n    body: isValidBody ? bodyData : undefined,\n    signal,\n  };\n\n  const isServer = typeof window === 'undefined';\n\n  let controller;\n  let timeoutId;\n  \n  if (!isServer) {\n    controller = new AbortController();\n    const { signal: controllerSignal } = controller;\n\n    if (signal) {\n      signal.addEventListener('abort', () => controller.abort());\n    }\n\n    fetchOptions.signal = controllerSignal;\n  }\n\n  const request = fetch(urlStr, fetchOptions)\n    .then(response => response.text())\n    .then(text => text ? JSON.parse(text) : {})\n    .finally(() => {\n      if (!isServer && timeoutId) {\n        clearTimeout(timeoutId);\n      }\n    });\n\n  if (!isServer) {\n    const timeoutPromise = new Promise((_, reject) => {\n      timeoutId = setTimeout(() => {\n        const e = 'Request timeout!';\n        controller.abort(e);\n        reject(new Error(e));\n      }, timeout);\n    });\n    \n    return Promise.race([request, timeoutPromise]);\n  }\n  \n  return request;\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 372, "column": 0}, "map": {"version":3,"sources":["file:///Users/michael/projects/ttys/src/app/data/index.js"],"sourcesContent":["import pako from 'pako'\nimport {\n  fetchHandle,\n  decodeRC4,\n  getStorage,\n} from '@/app/utils'\nimport { ENCRYPT, cryptMode, appSecret } from '@/appConfig'\n\n// eslint-disable-next-line\nexport default async (params, signal, translations = {}) => {\n  try {\n    const result = await fetchHandle({\n      ...params,\n      encrypt: ENCRYPT,\n      secretKey: appSecret,\n    }, signal)\n\n    if (result && Object.keys(result).length) {\n      const { data, errMsg } = result\n\n      if (errMsg) {\n        await Promise.reject(errMsg)\n      }\n\n      if (data) {\n        if (ENCRYPT) {\n          if (cryptMode === 'g') {\n            const binaryData = atob(data);\n            const uint8Array = new Uint8Array([...binaryData].map(c => c.charCodeAt(0)));\n            const decompressedData = pako.inflate(uint8Array, { to: 'string' })\n\n            return JSON.parse(decompressedData)\n          }\n          return JSON.parse(decodeRC4(data))\n        } else {\n          return data\n        }\n      }\n    }\n  } catch (err) {\n    if (err) {\n      const errStr = typeof err === 'string' ? err : err.toString()\n      const userExist = errStr.includes('user existed')\n      const userNotExist = errStr.includes('user not exist')\n      const authFaild = errStr.includes('authorization header not fined') || errStr.includes('Authorization Failed') || errStr.includes('access token not fined') || errStr.includes('invalid token')\n      const emptyQuery = errStr.includes('Query was empty')\n      const notFind = errStr.includes('record not found')\n      const invalidString = errStr.includes('Incorrect string value')\n      const responseErr = errStr.includes('no response')\n      const passwordErr = errStr.includes('wrong password')\n      const networkErr = errStr.includes('Network request failed')\n      const timeout = errStr.includes('time out')\n      const abortError = errStr.includes('AbortError')\n\n      const t = (key) => translations[key] || key;\n\n      if (userExist) {\n        console.warn(t('general_user_exist'), 1)\n      } else if (userNotExist) {\n        console.warn(t('general_user_not_exist'), 1)\n      } else if (authFaild) {\n        console.warn(t('general_auth_fail'), 1)\n      } else if (emptyQuery) {\n        console.warn(t('main_noData'), 1)\n      } else if (notFind) {\n        console.info(t('main_noData'))\n      } else if (invalidString) {\n        console.warn(t('general_wrong_character'), 1)\n        await Promise.reject(err)\n      } else if (responseErr) {\n        console.warn(t('general_net_slow'), 1)\n      } else if (passwordErr) {\n        Toast.fail(t('general_login_faild'), 1)\n        await Promise.reject(err)\n      } else if (timeout) {\n        console.warn(t('general_net_wrong'), 1)\n        await Promise.reject(new Error(t('general_net_wrong')))\n      } else if (networkErr) {\n        const net = await getStorage('netinfo')\n        if (!net?.connected) {\n          console.warn(t('general_net_unconnected'))\n          await Promise.reject(new Error(t('general_net_unconnected')))\n        } else {\n          console.warn(t('general_net_fault'), 1)\n          await Promise.reject(new Error(t('general_net_fault')))\n        }\n      } else if (abortError) {\n        console.warn(err.toString())\n      } else {\n        console.error(errStr)\n        console.warn(t('general_net_link_fault'), 1)\n        await Promise.reject(err)\n      }\n\n    }\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 475, "column": 0}, "map": {"version":3,"sources":["file:///Users/michael/projects/ttys/src/app/utils/categoryData.ts"],"sourcesContent":["import { CategoryType } from '../store/useAppStore';\nimport { getCategoriesServerSide } from '../data/videos';\nimport { getConfig } from '@/appConfig';\n\n// 分类数据类型\nexport interface CategoryGroup {\n  title: string;\n  items: CategoryType[];\n}\n\n// API返回的原始分类数据类型\ninterface ApiCategory {\n  name: string;\n  type: string;\n  data: string[];\n}\n\n/**\n * 处理API返回的原始分类数据\n * 将数字ID转换为实际标签文本\n * \n * @param data API返回的原始分类数据\n * @param locale 当前语言\n * @param tabType 当前标签类型\n * @returns 处理后的分类数据\n */\nexport const processCategories = (data: ApiCategory[], locale: string = 'cn', tabType: string = 'movie'): CategoryGroup[] => {\n  if (!data || !Array.isArray(data)) {\n    console.warn('无效的分类数据格式');\n    return [];\n  }\n\n  // 使用appConfig中定义的常量映射\n  const { CATEGORY_TYPE, CONTENT_TYPE, REELS_CONTENT_TYPE, AREA, YEAR } = getConfig(locale);\n\n  // 处理结果数组\n  const result: CategoryGroup[] = [];\n\n  // 首先根据tabType过滤合适的分类数据\n  const filteredCategories = data.filter(category => {\n    // 确保category和name存在\n    if (!category || !category.name) return false;\n    \n    // 短剧特殊处理\n    if (tabType === 'short-drama') {\n      return category.name === 'reels_content_type';\n    } else {\n      // 非短剧排除reels_content_type\n      return category.name !== 'reels_content_type';\n    }\n  });\n\n  // 遍历过滤后的分类数据\n  filteredCategories.forEach(category => {\n    // 跳过video_type类型或无效数据\n    if (!category || !category.name || category.name === 'video_type' || category.name === 'art_type' || !Array.isArray(category.data)) {\n      return;\n    }\n\n    // 根据分类类型确定标题和处理方式\n    let title = '';\n    let items: CategoryType[] = [];\n\n    switch (category.name) {\n      \n      case 'content_type':\n        title = CATEGORY_TYPE[0];\n        items = category.data.map((id: string) => ({\n          id,\n          name: CONTENT_TYPE[id as keyof typeof CONTENT_TYPE] || id\n        }));\n        break;\n      \n      case 'reels_content_type':\n        title = CATEGORY_TYPE[0];\n        items = category.data.map((id: string) => ({\n          id,\n          name: REELS_CONTENT_TYPE[id as keyof typeof REELS_CONTENT_TYPE] || id\n        }));\n        break;\n      \n      case 'area':\n        title = CATEGORY_TYPE[1];\n        items = category.data.map((id: string) => ({\n          id,\n          name: AREA[id as keyof typeof AREA] || id\n        }));\n        break;\n      \n      case 'release_year':\n        title = CATEGORY_TYPE[2];\n        items = category.data.map((id: string) => ({\n          id,\n          name: id.length < 3 ? `${id}${YEAR}` : id\n        }));\n        // 年份需要反序排列\n        items.reverse();\n        break;\n      \n      default:\n        title = category.name;\n        items = category.data.map((id: string) => ({\n          id,\n          name: String(id)\n        }));\n    }\n\n    // 添加\"全部\"选项\n    if (items.length > 0) {\n      items.unshift({\n        id: 'all',\n        name: CATEGORY_TYPE[3]\n      });\n    }\n\n    // 添加到结果数组\n    result.push({\n      title,\n      items\n    });\n  });\n\n  // 确保每种分类类型都有数据\n  if (tabType !== 'short-drama') {\n    // 检查并添加缺失的分类类型\n    const titles = result.map(group => group.title);\n    \n    // 确保类型分类存在\n    if (!titles.includes(CATEGORY_TYPE[0])) {\n      result.push({\n        title: CATEGORY_TYPE[0],\n        items: [{\n          id: 'all',\n          name: CATEGORY_TYPE[3]\n        }]\n      });\n    }\n    \n    // 确保地区分类存在\n    if (!titles.includes(CATEGORY_TYPE[1])) {\n      result.push({\n        title: CATEGORY_TYPE[1],\n        items: [{\n          id: 'all',\n          name: CATEGORY_TYPE[3]\n        }]\n      });\n    }\n    \n    // 确保年份分类存在\n    if (!titles.includes(CATEGORY_TYPE[2])) {\n      result.push({\n        title: CATEGORY_TYPE[2],\n        items: [{\n          id: 'all',\n          name: CATEGORY_TYPE[3]\n        }]\n      });\n    }\n  }\n\n  return result;\n};\n\n/**\n * 通用获取分类数据方法\n * 从API获取分类数据并根据tab类型进行筛选处理\n * \n * @param tab 当前标签: 'movie' | 'tv' | 'anime' | 'short-drama'\n * @param locale 当前语言\n * @returns 处理后的分类数据\n */\nexport const getCategories = async (\n  tab: 'movie' | 'tv' | 'anime' | 'short-drama' = 'movie',\n  locale: string = 'cn'\n): Promise<CategoryGroup[]> => {\n  try {\n    // 从API获取所有分类数据，使用tab参数\n    const apiCategories = await getCategoriesServerSide(tab, locale);\n    \n    if (!apiCategories || apiCategories.length === 0) {\n      console.warn('未能获取分类数据');\n      return [];\n    }\n    \n    return apiCategories;\n  } catch (error) {\n    console.error('获取分类数据失败', error);\n    return [];\n  }\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 630, "column": 0}, "map": {"version":3,"sources":["file:///Users/michael/projects/ttys/src/app/data/videos.js"],"sourcesContent":["import {\n  ORIGIN,\n  getConfig\n} from '@/appConfig'\n\nimport fetchData from './index'\nimport { processCategories } from '../utils/categoryData'\n\n// 添加请求去重和缓存系统\nconst pendingRequests = {};\nconst requestCache = {};\nconst REQUEST_CACHE_TIME = 5000; // 缓存5秒\n\n// 原始的API请求函数\nconst _originalGetVideoList = ({...args}, signal) => {\n  const params = []\n  Object.entries(args).forEach(item => {\n    params.push(item[1] !== '' ? `${item[0]}=${item[1]}` : '')\n  })\n\n  return fetchData({\n    url: `${ORIGIN}/videos/playList?${params.join('&')}&playable=1`,\n  }, signal)\n}\n\n// 增强版API请求函数，带有去重和缓存机制\nexport const getVideoList = ({...args}, signal) => {\n  // 如果有requestId参数，从请求参数中移除它（它只用于缓存键）\n  const { requestId, ...apiParams } = args;\n  \n  // 生成请求的唯一标识，用于缓存和去重\n  const cacheKey = JSON.stringify(apiParams);\n  \n  // 检查是否有缓存的结果\n  if (requestCache[cacheKey] && Date.now() - requestCache[cacheKey].timestamp < REQUEST_CACHE_TIME) {\n    console.log('📦 从缓存加载数据:', cacheKey);\n    return Promise.resolve(requestCache[cacheKey].data);\n  }\n  \n  // 检查是否有相同的请求正在进行中\n  if (pendingRequests[cacheKey]) {\n    return pendingRequests[cacheKey];\n  }\n  \n  // 创建新的请求并存储Promise\n  pendingRequests[cacheKey] = _originalGetVideoList(apiParams, signal)\n    .then(response => {\n      // 缓存响应数据\n      if (response) {\n        requestCache[cacheKey] = {\n          data: response,\n          timestamp: Date.now()\n        };\n      }\n      return response;\n    })\n    .finally(() => {\n      // 延迟删除挂起的请求引用，避免多次并发调用\n      setTimeout(() => {\n        delete pendingRequests[cacheKey];\n      }, 100);\n    });\n  \n  return pendingRequests[cacheKey];\n}\n\nexport const getShortVideoList = ({...args}, signal) => {\n  const params = []\n  Object.entries(args).forEach(item => {\n    params.push(item[1] !== '' ? `${item[0]}=${item[1]}` : '')\n  })\n\n  return fetchData({\n    url: `${ORIGIN}/videos/shortPlayList?${params.join('&')}&playable=1`,\n  }, signal)\n}\n\nexport const getCategoryData = ({...args}, signal) => {\n  const params = []\n  Object.entries(args).forEach(item => {\n    params.push(item[1] !== '' ? `${item[0]}=${item[1]}` : '')\n  })\n\n  return fetchData({\n    url: `${ORIGIN}/videos/getCategories?${params.join('&')}`,\n  }, signal)\n}\n\nexport const addMedia = (params, token, signal) => fetchData({\n  url: `${ORIGIN}/videos/auth/addOne`,\n  method: 'POST',\n  token,\n  body: params,\n}, signal)\n\n/**\n * 服务端获取分类数据\n * 这个函数将在服务端组件中使用\n * @param tabType 标签类型：movie, tv, anime, short-drama, all (all表示获取所有分类数据)\n * @returns 处理后的分类数据\n */\nexport async function getCategoriesServerSide(tabType, locale) {\n  const { CATEGORY_TYPE } = getConfig(locale);\n  try {\n    // 统一获取所有分类数据\n    const response = await getCategoryData({});\n    \n    if (!response) {\n      console.error('API响应为空');\n      return [];\n    }\n    \n    // 使用工具函数处理分类数据\n    const processedCategories = processCategories(response, locale, tabType);\n    \n    return processedCategories;\n  } catch (error) {\n    console.error('服务端获取分类数据失败:', error);\n    // 发生错误时返回基础分类\n    return [{\n      title: CATEGORY_TYPE[0],\n      items: [\n        { id: 'all', name: CATEGORY_TYPE[3] }\n      ]\n    }];\n  }\n}\n\n/**\n * 服务端获取视频列表数据\n * 这个函数将在服务端组件中使用\n * @param tabType 标签类型：movie, tv, anime, short-drama\n * @param filters 筛选条件\n * @returns 处理后的视频列表数据\n */\nexport async function getVideoListServerSide(tabType, filters = {}, locale = 'cn') {\n  try {\n    // 将tabType映射到API所需的artType\n    const tabTypeToArtType = {\n      'movie': '0', // 电影\n      'tv': '1', // 电视剧\n      'anime': '2', // 动漫\n      'short-drama': '8' // 短剧\n    };\n    \n    // 是否为短剧\n    const isShortDrama = tabType === 'short-drama';\n    \n    // 构建API参数\n    const params = {\n      videoType: isShortDrama ? '3' : '0',\n      artType: tabTypeToArtType[tabType],\n      pageIndex: 0,\n      pageSize: 24, // 首屏加载多一些内容\n    };\n    \n    // 添加筛选条件\n    if (filters.region && filters.region !== 'all') {\n      params.area = filters.region;\n    }\n    \n    if (filters.year && filters.year !== 'all') {\n      params.releaseYear = filters.year;\n    }\n    \n    // 根据标签类型处理内容类型筛选\n    if (isShortDrama) {\n      // 短剧使用reels_content_type参数\n      if (filters.type && filters.type !== 'all') {\n        params.reelsContentType = filters.type;\n      }\n    } else {\n      // 其他标签使用content_type参数\n      if (filters.type && filters.type !== 'all') {\n        // 同时支持contentType格式\n        params.contentType = filters.type;\n      }\n    }\n\n    // 获取数据\n    const response = await getVideoList(params);\n    \n    if (!response) {\n      throw new Error('无法获取视频列表数据');\n    }\n    \n    // 判断是否有更多数据\n    const currentItemsCount = response.list.length;\n    const totalReceivedItems = currentItemsCount; // 因为是第一页，所以总接收数量就是当前页数量\n    const hasMore = totalReceivedItems < response.total && currentItemsCount === params.pageSize;\n    \n    // 将API返回的数据格式转换为前端组件需要的格式\n    const formattedData = {\n      videos: response.list.map((item) => ({\n        id: item.ID || String(item.ID) || `item-${page}-${index}`,\n        title: (locale === 'cn' || locale === 'tw') ? item.name : item.nameEn??item.name,\n        cover: item.coverSrc || item.coverHSrc || '', // 使用可用的封面图\n        description: item.introduction || item.summary || '',\n        score: item.score ? parseFloat(item.score) : 0,\n        year: item.releaseYear || '',\n        category: item.contentType ||  item.reelsContentType || '',\n        region: item.area || '',\n        updateInfo: item.lastWatchSet || '',\n        tags: []\n      })),\n      hasMore,\n      total: response.total || 0,\n      isLoading: false,\n      isError: false\n    };\n    \n    return formattedData;\n  } catch (error) {\n    console.error('服务端获取视频列表失败:', error);\n    // 返回错误状态\n    return {\n      videos: [],\n      hasMore: false,\n      total: 0,\n      isLoading: false,\n      isError: true,\n      error: error.message\n    };\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 831, "column": 0}, "map": {"version":3,"sources":["file:///Users/michael/projects/ttys/src/app/hooks/useVideoList.ts"],"sourcesContent":["import { useCallback, useState, useEffect, useRef, useMemo } from 'react';\nimport { CategoryType } from '../store/useAppStore';\nimport useSWRInfinite from 'swr/infinite';\nimport { VideoItem, VideoListResponse } from '../types/video';\nimport { getVideoList } from '../data/videos.js';\nimport { DEFAULT_LOCALE } from '../i18n/client';\n\ninterface VideoListParams {\n  tabType: 'movie' | 'tv' | 'anime' | 'short-drama';\n  filters?: {\n    type?: string;\n    region?: string;\n    year?: string;\n  };\n  initialData?: {\n    videos: VideoItem[];\n    hasMore: boolean;\n    total: number;\n    isLoading: boolean;\n    isError: boolean;\n    error?: string;\n  };\n  locale?: string;\n}\n\n// API请求参数类型\ninterface ApiParams {\n  artType: string;\n  pageIndex: number;\n  pageSize: number;\n  contentType?: string;\n  area?: string;\n  releaseYear?: string;\n  videoType?: string;\n  reelsContentType?: string;\n  release_year?: string;\n  [key: string]: any; // 允许添加其他参数\n}\n\n// API响应类型\ninterface ApiResponse {\n  list: Array<{\n    id: number;\n    name: string;\n    area?: string;\n    artType?: string;\n    author?: string;\n    authorAvatar?: string;\n    authorName?: string;\n    commentCount?: number;\n    contentType?: string;\n    coverHSrc?: string;\n    coverHSrcLocal?: string;\n    coverSrc?: string;\n    coverSrcLocal?: string;\n    createdAt?: string;\n    deletedAt?: string;\n    director?: string;\n    duration?: string;\n    introduction?: string;\n    isFollowerId?: string;\n    isLikedId?: string;\n    lastWatchSet?: string;\n    lastWatchTime?: string;\n    level?: string;\n    likeCount?: number;\n    nameEn?: string;\n    playable?: string;\n    reelsContentType?: string;\n    releaseYear?: string;\n    score?: string;\n    setsCount?: string;\n    shareCount?: number;\n    starring?: string;\n    summary?: string;\n    updatedAt?: string;\n    url?: string;\n    urlLocal?: string;\n    vid?: string;\n    videoType?: string;\n    [key: string]: any;\n  }>;\n  pageIndex: number;\n  pageSize: number;\n  platformInfo?: {\n    showAds: string;\n  };\n  total: number;\n}\n\n// 将tabType映射到API所需的artType\nconst tabTypeToArtType = {\n  'movie': '0', // 电影\n  'tv': '1', // 电视剧\n  'anime': '2', // 动漫\n  'short-drama': '8' // 短剧\n};\n\n/**\n * 处理视频列表数据获取和筛选的钩子函数\n */\nexport const useVideoList = ({ tabType, filters = {}, initialData, locale = DEFAULT_LOCALE }: VideoListParams) => {\n  // 用于存储服务端获取的初始数据\n  const [serverData, setServerData] = useState<{\n    videos: VideoItem[];\n    hasMore: boolean;\n    total: number;\n  } | null>(initialData ? {\n    videos: initialData.videos,\n    hasMore: initialData.hasMore,\n    total: initialData.total\n  } : null);\n  \n  // 用于强制触发组件重新渲染\n  const [forceUpdate, setForceUpdate] = useState(0);\n  \n  // 跟踪当前标签和筛选条件\n  const [currentTabType, setCurrentTabType] = useState(tabType);\n  const [currentFilters, setCurrentFilters] = useState(JSON.stringify(filters));\n  \n  // 状态标记\n  const isLoadingRef = useRef(false);\n  const isInitialLoadRef = useRef(true);\n  const manualTriggerRef = useRef(false);\n  \n  // 缓存筛选条件\n  const filtersRef = useRef(filters);\n  useEffect(() => {\n    filtersRef.current = filters;\n  }, [filters]);\n  \n  // 当前页数\n  const pageRef = useRef(0);\n  \n  // 构建缓存键\n  const swrKey = useMemo(() => \n    `videos-${tabType}-${JSON.stringify(filters)}-${locale}`, \n    [tabType, filters, locale]\n  );\n  \n  // 检测标签类型或筛选条件变化\n  useEffect(() => {\n    const newTabType = tabType;\n    const newFilters = JSON.stringify(filters);\n    \n    if (currentTabType !== newTabType || currentFilters !== newFilters) {\n      // console.log(`检测到变化: 标签从 ${currentTabType} 变为 ${newTabType}, 或筛选条件变更`);\n      \n      // 更新当前状态\n      setCurrentTabType(newTabType);\n      setCurrentFilters(newFilters);\n      \n      // 重置状态\n      pageRef.current = 0;\n      isLoadingRef.current = false;\n      isInitialLoadRef.current = true;\n      \n      // 如果是标签变更，保留初始数据\n      if (initialData && currentTabType !== newTabType) {\n        setServerData({\n          videos: initialData.videos,\n          hasMore: initialData.hasMore,\n          total: initialData.total\n        });\n      } else {\n        // 如果是筛选条件变更，清空服务端数据\n        setServerData(null);\n      }\n      \n      // 触发数据重新加载\n      manualTriggerRef.current = true;\n      // 强制重新渲染以确保状态更新\n      setForceUpdate(prev => prev + 1);\n    }\n  }, [tabType, filters, initialData, currentTabType, currentFilters]);\n  \n  // 页面加载或参数修改时初始化数据获取函数\n  const fetchVideoList = useCallback(async (page: number) => {\n    if (isLoadingRef.current && page > 1) return null;\n    \n    // console.log(`请求视频列表: 页码=${page}, 标签=${tabType}`);\n    isLoadingRef.current = true;\n    \n    try {\n      const params: ApiParams = {\n        videoType: tabTypeToArtType[tabType] === '8' ? '3' : '0',\n        artType: tabTypeToArtType[tabType],\n        pageIndex: page,\n        pageSize: 18\n      };\n      \n      // 添加筛选条件\n      if (filtersRef.current.region && filtersRef.current.region !== 'all') {\n        params.area = filtersRef.current.region;\n      }\n      \n      if (filtersRef.current.year && filtersRef.current.year !== 'all') {\n        params.releaseYear = filtersRef.current.year;\n      }\n      \n      // 根据标签类型处理内容类型筛选\n      if (tabType === 'short-drama') {\n        // 短剧使用reels_content_type参数\n        if (filtersRef.current.type && filtersRef.current.type !== 'all') {\n          params.reelsContentType = filtersRef.current.type;\n        }\n      } else {\n        // 其他标签使用content_type参数\n        if (filtersRef.current.type && filtersRef.current.type !== 'all') {\n          params.contentType = filtersRef.current.type;\n        }\n      }\n      \n      // console.log(`请求参数:`, params);\n      const response = await getVideoList(params) as ApiResponse;\n      // console.log(`请求成功，获取到 ${response.list.length} 条数据`);\n      \n      // 判断是否有更多数据\n      const currentItemsCount = response.list.length;\n      const totalReceivedItems = (page - 1) * params.pageSize + currentItemsCount;\n      const hasMore = totalReceivedItems < response.total && currentItemsCount === params.pageSize;\n      \n      // 根据locale决定使用哪个标题作为主标题\n      const formattedVideos = response.list.map((item, index) => {\n        // 当locale不是cn时，优先使用英文标题\n        const primaryTitle = (locale === 'cn' || locale === 'tw') ? item.name : item.nameEn??item.name;\n        \n          \n          \n        return {\n          id: item.ID || String(item.ID) || `item-${page}-${index}`,\n          title: primaryTitle,\n          cover: item.coverSrc || item.coverHSrc || '',\n          description: item.introduction || item.summary || '',\n          score: item.score ? parseFloat(item.score) : 0,\n          year: item.releaseYear || item.release_year || '',\n          category: item.contentType || item.content_type || item.reelsContentType || item.reels_content_type || '',\n          region: item.area || '',\n          updateInfo: item.lastWatchSet || item.last_watch_set || '',\n          tags: []\n        };\n      });\n      \n      // 首次加载完成\n      isInitialLoadRef.current = false;\n      \n      // 返回处理后的结果\n      return {\n        videos: formattedVideos,\n        hasMore,\n        total: response.total || 0,\n        page\n      };\n    } catch (error) {\n      console.error('获取视频列表失败:', error);\n      return {\n        videos: [],\n        hasMore: false,\n        total: 0,\n        page,\n        error: error instanceof Error ? error.message : '未知错误'\n      };\n    } finally {\n      isLoadingRef.current = false;\n    }\n  }, [tabType, locale]);\n  \n  // 存储所有已加载的视频\n  const [videoState, setVideoState] = useState<{\n    videos: VideoItem[];\n    hasMore: boolean;\n    isLoading: boolean;\n    error: string | null;\n    total: number;\n  }>({\n    videos: initialData?.videos || [],\n    hasMore: initialData?.hasMore || false,\n    isLoading: false,\n    error: null,\n    total: initialData?.total || 0\n  });\n  \n  // 加载更多视频\n  const loadMore = useCallback(async () => {\n    // 避免重复请求\n    if (isLoadingRef.current || !videoState.hasMore) {\n      // console.log('跳过加载: 正在加载中或没有更多数据');\n      return;\n    }\n    \n    // console.log(`开始加载更多，当前页码: ${pageRef.current}`);\n    \n    // 设置加载状态\n    setVideoState(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    \n    try {\n      // 获取下一页数据\n      const nextPage = pageRef.current + 1;\n      const result = await fetchVideoList(nextPage);\n      \n      // 如果获取失败或没有数据，停止处理\n      if (!result || result.error) {\n        throw new Error(result?.error || '加载失败');\n      }\n      \n      // 更新页码\n      pageRef.current = nextPage;\n      \n      // 更新视频状态，合并新旧数据\n      setVideoState(prev => {\n        // 创建临时映射去重\n        const videoMap = new Map<string, VideoItem>();\n        \n        // 添加已有视频\n        prev.videos.forEach(video => {\n          videoMap.set(video.id, video);\n        });\n        \n        // 添加新视频\n        result.videos.forEach(video => {\n          videoMap.set(video.id, video);\n        });\n        \n        // 将映射转换回数组\n        const newVideos = Array.from(videoMap.values());\n        \n        return {\n          videos: newVideos,\n          hasMore: result.hasMore,\n          isLoading: false,\n          error: null,\n          total: result.total\n        };\n      });\n      \n      // console.log(`加载更多完成，已加载 ${pageRef.current} 页`);\n    } catch (error) {\n      console.error('加载更多失败:', error);\n      setVideoState(prev => ({\n        ...prev,\n        isLoading: false,\n        error: error instanceof Error ? error.message : '加载失败'\n      }));\n    }\n  }, [videoState.hasMore, fetchVideoList]);\n  \n  // 重新加载全部数据\n  const reloadData = useCallback(async () => {\n    // console.log('重新加载所有数据');\n    \n    // 重置状态\n    pageRef.current = 0;\n    isLoadingRef.current = true;\n    \n    // 设置加载状态\n    setVideoState(prev => ({\n      ...prev,\n      isLoading: true,\n      error: null,\n      videos: []\n    }));\n    \n    try {\n      // 获取第一页数据\n      const result = await fetchVideoList(0);\n      \n      // 如果获取失败或没有数据，停止处理\n      if (!result || result.error) {\n        throw new Error(result?.error || '加载失败');\n      }\n      \n      // 更新视频状态\n      setVideoState({\n        videos: result.videos,\n        hasMore: result.hasMore,\n        isLoading: false,\n        error: null,\n        total: result.total\n      });\n      \n      // console.log(`重新加载完成，获取到 ${result.videos.length} 条数据`);\n    } catch (error) {\n      console.error('重新加载失败:', error);\n      setVideoState(prev => ({\n        ...prev,\n        isLoading: false,\n        error: error instanceof Error ? error.message : '加载失败'\n      }));\n    }\n  }, [fetchVideoList]);\n  \n  // 首次加载或参数变化时自动加载\n  useEffect(() => {\n    // 如果是手动触发，直接加载\n    if (manualTriggerRef.current) {\n      // console.log('参数变化，手动触发数据加载');\n      manualTriggerRef.current = false;\n      reloadData();\n      return;\n    }\n    \n    // 如果有初始数据且是首次加载，不需要自动加载\n    if (initialData && isInitialLoadRef.current && serverData) {\n      // console.log('使用初始数据，不需要自动加载');\n      setVideoState({\n        videos: serverData.videos,\n        hasMore: serverData.hasMore,\n        isLoading: false,\n        error: null,\n        total: serverData.total\n      });\n      isInitialLoadRef.current = false;\n      return;\n    }\n    \n    // 自动加载第一页\n    if (isInitialLoadRef.current) {\n      // console.log('首次加载，自动请求第一页数据');\n      reloadData();\n    }\n  }, [initialData, serverData, reloadData, forceUpdate]);\n  \n  // 处理筛选变化\n  const handleFilterChange = useCallback(() => {\n    return reloadData();\n  }, [reloadData]);\n  \n  // 计算最终状态\n  const isEmpty = videoState.videos.length === 0 && !videoState.isLoading;\n  \n  return {\n    videos: videoState.videos,\n    hasMore: videoState.hasMore,\n    total: videoState.total,\n    isLoading: videoState.isLoading,\n    isLoadingMore: videoState.isLoading && pageRef.current > 1,\n    isEmpty,\n    error: videoState.error,\n    loadMore,\n    handleFilterChange,\n    currentPage: pageRef.current\n  };\n}; "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1200, "column": 0}, "map": {"version":3,"sources":["file:///Users/michael/projects/ttys/src/app/components/videos/CategoryTabs.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useRef, useEffect, useCallback } from 'react';\nimport { useSwipeable } from 'react-swipeable';\nimport type { CategoryType } from '@/app/store/useAppStore';\nimport useAppStore, { FilterType } from '@/app/store/useAppStore';\nimport { useRouter, usePathname, useSearchParams } from 'next/navigation';\nimport { debounce } from 'lodash';\nimport type { CategoryGroup } from '@/app/utils/categoryData';\nimport { THEME_COLOR } from '@/appConfig';\n\ninterface CategoryTabsProps {\n  categories: CategoryGroup[];\n  tabType: 'movie' | 'tv' | 'anime' | 'short-drama';\n  translations: Record<string, string>;\n}\n\nexport default function CategoryTabs({ \n  categories = [], \n  tabType,\n  translations \n}: CategoryTabsProps) {\n  // UI状态\n  const [activeTabIndex, setActiveTabIndex] = useState(0);\n  const tabsRef = useRef<HTMLDivElement>(null);\n  \n  // 从全局状态store获取筛选条件\n  const { \n    filter, \n    setFilter, \n    updateFilter,\n    activeCategory, \n    activeRegion, \n    activeYear, \n    activeType \n  } = useAppStore();\n  \n  // 路由和URL参数相关\n  const router = useRouter();\n  const pathname = usePathname();\n  const searchParams = useSearchParams();\n  \n  // 用于初始化和更新控制的引用\n  const didInit = useRef(false);\n  const prevSearchParams = useRef('');\n  const isUpdatingURL = useRef(false);\n  const prevFilterRef = useRef(filter);\n  const prevFilterKeysRef = useRef(Object.keys(filter).length);\n  \n  // 跟踪是否是用户手动更改了筛选条件\n  const isUserAction = useRef(false);\n\n  // 将标题映射到筛选条件类型\n  const getFilterType = useCallback((title: string): string => {\n    // 获取标题的小写形式，便于比较\n    const lowerTitle = title.toLowerCase();\n    \n    // 安全获取翻译文本（防御性编程）\n    const typeText = translations.category_type ? translations.category_type.toLowerCase() : '';\n    const regionText = translations.category_region ? translations.category_region.toLowerCase() : '';\n    const yearText = translations.category_year ? translations.category_year.toLowerCase() : '';\n    \n    // 与translations中的值比较，而非硬编码的中英文\n    if (lowerTitle === 'category' || lowerTitle === '类型' || (typeText && lowerTitle === typeText)) return 'type';\n    if (lowerTitle === 'region' || lowerTitle === '地区' || (regionText && lowerTitle === regionText)) return 'region';\n    if (lowerTitle === 'year' || lowerTitle === '年份' || lowerTitle === 'release_year' || (yearText && lowerTitle === yearText)) return 'year';\n    \n    return lowerTitle;\n  }, [translations]);\n  \n  // 新增：根据id查找分类名称\n  const getCategoryNameById = useCallback((categoryType: string, id: string): string => {\n    if (id === 'all') {\n      return 'all'; // 保持\"全部\"选项的特殊处理\n    }\n    \n    // 找到对应类型的分类组\n    const categoryGroup = categories.find(group => {\n      const filterTypeName = getFilterType(group.title);\n      return filterTypeName === categoryType;\n    });\n    \n    if (!categoryGroup) return id;\n    \n    // 在分类组中查找匹配id的项，返回其name\n    const categoryItem = categoryGroup.items.find(item => item.id === id);\n    return categoryItem ? categoryItem.name : id;\n  }, [categories, getFilterType]);\n  \n  // 新增：根据name查找分类id\n  const getCategoryIdByName = useCallback((categoryType: string, name: string): string => {\n    if (name === 'all') {\n      return 'all'; // 保持\"全部\"选项的特殊处理\n    }\n    \n    // 找到对应类型的分类组\n    const categoryGroup = categories.find(group => {\n      const filterTypeName = getFilterType(group.title);\n      return filterTypeName === categoryType;\n    });\n    \n    if (!categoryGroup) return name;\n    \n    // 在分类组中查找匹配name的项，返回其id\n    const categoryItem = categoryGroup.items.find(item => item.name === name);\n    return categoryItem ? categoryItem.id : name;\n  }, [categories, getFilterType]);\n  \n  // 当组件挂载时，从URL参数中获取筛选条件\n  useEffect(() => {\n    // 如果正在更新URL，跳过此次URL参数处理，避免循环\n    if (isUpdatingURL.current) {\n      return;\n    }\n    \n    // 只在首次渲染和URL参数变化时执行\n    if (!didInit.current || searchParams.toString() !== prevSearchParams.current) {\n      didInit.current = true;\n      prevSearchParams.current = searchParams.toString();\n      \n      const typeParam = searchParams.get('type') || 'all';\n      const regionParam = searchParams.get('region') || 'all';\n      const yearParam = searchParams.get('year') || 'all';\n      \n      // 将URL中的name值转换为id\n      const type = getCategoryIdByName('type', typeParam);\n      const region = getCategoryIdByName('region', regionParam);\n      const year = getCategoryIdByName('year', yearParam);\n      \n      // 更新全局筛选状态\n      const newFilter: FilterType = {};\n      \n      if (type !== 'all') newFilter.type = type;\n      \n      // 只有非短剧才有地区和年份筛选\n      if (tabType !== 'short-drama') {\n        if (region !== 'all') newFilter.region = region;\n        if (year !== 'all') newFilter.year = year;\n      }\n      \n      // 深度比较筛选条件是否真的改变，避免无意义的更新\n      const hasFilterChanged = \n        JSON.stringify(newFilter) !== JSON.stringify(filter);\n        \n      if (hasFilterChanged) {\n        // console.log('从URL更新筛选条件:', newFilter);\n        setFilter(newFilter);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [searchParams, setFilter, tabType, getCategoryIdByName]);\n  \n  // 新增：组件挂载时，如果store中已有筛选条件，将其同步到URL\n  useEffect(() => {\n    // 仅在组件首次挂载时执行一次\n    if (!didInit.current) {\n      return;\n    }\n\n    // 检查是否有筛选条件\n    const hasFilter = Object.keys(filter).length > 0;\n    // 检查URL是否为空\n    const hasURLParams = searchParams.toString().length > 0;\n    \n    // 只有在以下情况更新URL:\n    // 1. 是用户手动操作改变了筛选条件\n    // 2. URL完全为空但store中有筛选条件(避免空URL)\n    if (isUserAction.current || (hasFilter && !hasURLParams)) {\n      // 创建一个新的URLSearchParams对象\n      const params = new URLSearchParams();\n      \n      // 获取最新状态以确保数据是最新的\n      const currentFilter = useAppStore.getState().filter;\n\n      // 添加type参数 - 只有非\"all\"值才添加到URL\n      if (currentFilter.type && currentFilter.type !== 'all') {\n        const typeName = getCategoryNameById('type', currentFilter.type);\n        params.set('type', typeName);\n      }\n      \n      // 只有非短剧才有地区和年份\n      if (tabType !== 'short-drama') {\n        // 添加region参数 - 只有非\"all\"值才添加到URL\n        if (currentFilter.region && currentFilter.region !== 'all') {\n          const regionName = getCategoryNameById('region', currentFilter.region);\n          params.set('region', regionName);\n        }\n        \n        // 添加year参数 - 只有非\"all\"值才添加到URL\n        if (currentFilter.year && currentFilter.year !== 'all') {\n          const yearName = getCategoryNameById('year', currentFilter.year);\n          params.set('year', yearName);\n        }\n      }\n      \n      // 检查是否需要更新URL\n      const newParamsString = params.toString();\n      if (newParamsString !== searchParams.toString()) {\n        isUpdatingURL.current = true;\n        prevSearchParams.current = newParamsString;\n        \n        // console.log('更新URL参数:', newParamsString);\n        \n        // 使用history API直接更新URL, 避免导航请求\n        try {\n          const url = new URL(window.location.href);\n          url.search = newParamsString;\n          window.history.replaceState(\n            window.history.state,\n            '',\n            url.toString()\n          );\n        } catch (error) {\n          console.error('更新URL失败:', error);\n        }\n        \n        // 更新完成后重置标记\n        setTimeout(() => {\n          isUpdatingURL.current = false;\n          isUserAction.current = false; // 重置用户操作标记\n        }, 50);\n      } else {\n        // 如果URL不需要更新，也要重置用户操作标记\n        isUserAction.current = false;\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [filter]);\n  \n  // 辅助函数：检查当前URL参数是否与筛选条件匹配\n  const isFilterMatchingURL = useCallback(() => {\n    const typeParam = searchParams.get('type') || 'all';\n    const typeId = getCategoryIdByName('type', typeParam);\n    \n    // 检查type是否匹配\n    if ((filter.type || 'all') !== typeId) {\n      return false;\n    }\n    \n    // 检查region是否匹配（仅非短剧）\n    if (tabType !== 'short-drama') {\n      const regionParam = searchParams.get('region') || 'all';\n      const regionId = getCategoryIdByName('region', regionParam);\n      if ((filter.region || 'all') !== regionId) {\n        return false;\n      }\n      \n      // 检查year是否匹配\n      const yearParam = searchParams.get('year') || 'all';\n      const yearId = getCategoryIdByName('year', yearParam);\n      if ((filter.year || 'all') !== yearId) {\n        return false;\n      }\n    }\n    \n    return true;\n  }, [filter, searchParams, tabType, getCategoryIdByName]);\n  \n  // 创建一个带有防抖功能的URL更新函数\n  const debouncedUpdateURL = debounce((newParamsString: string) => {\n    if (isUpdatingURL.current) return;\n    \n    isUpdatingURL.current = true;\n    \n    // 预先更新prevSearchParams，避免后续useEffect中的重复处理\n    prevSearchParams.current = newParamsString;\n    \n    // console.log('防抖更新URL参数:', newParamsString, '当前URL:', window.location.href);\n    \n    // 使用history API直接更新URL, 避免导航请求\n    try {\n      const url = new URL(window.location.href);\n      url.search = newParamsString;\n      window.history.replaceState(\n        window.history.state,\n        '',\n        url.toString()\n      );\n    } catch (error) {\n      console.error('更新URL失败:', error);\n    }\n    \n    // URL更新完成后重置标记\n    setTimeout(() => {\n      isUpdatingURL.current = false;\n    }, 50); // 延迟50ms确保处理完成\n  }, 50)\n  \n  // 滚动到视频列表顶部\n  const scrollToVideoListTop = useCallback(() => {\n    // 等待视频列表渲染后滚动\n    setTimeout(() => {\n      // 获取视频列表中的第一个卡片元素\n      const firstVideoCard = document.querySelector('.video-list .grid > *:first-child');\n      if (firstVideoCard) {\n        firstVideoCard.scrollIntoView({ behavior: 'smooth', block: 'start' });\n      } else {\n        // 如果找不到卡片元素，尝试滚动到整个视频列表容器\n        const videoList = document.querySelector('.video-list');\n        if (videoList) {\n          videoList.scrollIntoView({ behavior: 'smooth', block: 'start' });\n        }\n      }\n    }, 300);\n  }, []);\n  \n  // 监听筛选条件变化，滚动到顶部\n  // useEffect(() => {\n  //   const currentFilterKeys = Object.keys(filter).length;\n  //   // 只有当筛选条件真正发生变化时才滚动\n  //   if (JSON.stringify(filter) !== JSON.stringify(prevFilterRef.current) || \n  //       currentFilterKeys !== prevFilterKeysRef.current) {\n\n  //     scrollToVideoListTop();\n  //     prevFilterRef.current = filter;\n  //     prevFilterKeysRef.current = currentFilterKeys;\n  //   }\n  // }, [filter, scrollToVideoListTop]);\n  \n  // 处理分类变更\n  const handleCategoryChange = useCallback((categoryId: string, categoryType: string) => {\n    // 标记这是用户手动操作\n    isUserAction.current = true;\n    \n    // 先更新状态，再更新URL\n    // 避免先更新URL导致的额外渲染和API调用\n    updateFilter(categoryType, categoryId);\n    \n    // 在下一个微任务中构建完整的URL参数\n    // 这确保状态已经更新\n    setTimeout(() => {\n      // 构建完整的URL参数\n      const params = new URLSearchParams();\n      \n      // 获取最新状态而不是依赖可能未更新的filter\n      const currentFilter = useAppStore.getState().filter;\n      \n      // 添加type参数 - 只有非\"all\"值才添加到URL\n      if (currentFilter.type && currentFilter.type !== 'all') {\n        const typeName = getCategoryNameById('type', currentFilter.type);\n        params.set('type', typeName);\n      }\n      \n      // 只有非短剧才有地区和年份\n      if (tabType !== 'short-drama') {\n        // 添加region参数 - 只有非\"all\"值才添加到URL\n        if (currentFilter.region && currentFilter.region !== 'all') {\n          const regionName = getCategoryNameById('region', currentFilter.region);\n          params.set('region', regionName);\n        }\n        \n        // 添加year参数 - 只有非\"all\"值才添加到URL\n        if (currentFilter.year && currentFilter.year !== 'all') {\n          const yearName = getCategoryNameById('year', currentFilter.year);\n          params.set('year', yearName);\n        }\n      }\n      \n      // 使用防抖方式更新URL\n      debouncedUpdateURL(params.toString());\n    }, 0);\n  }, [updateFilter, tabType, getCategoryNameById, debouncedUpdateURL]);\n  \n  // 处理标签切换\n  const handleTabChange = (index: number) => {\n    setActiveTabIndex(index);\n    scrollToTab(index);\n  };\n  \n  // 滑动到指定标签\n  const scrollToTab = (index: number) => {\n    if (tabsRef.current) {\n      const tabsElement = tabsRef.current;\n      const tabElement = tabsElement.children[index] as HTMLElement;\n      \n      if (tabElement) {\n        const scrollLeft = tabElement.offsetLeft - (tabsElement.clientWidth / 2) + (tabElement.clientWidth / 2);\n        tabsElement.scrollTo({\n          left: scrollLeft,\n          behavior: 'smooth'\n        });\n      }\n    }\n  };\n  \n  // 滑动手势\n  const swipeHandlers = useSwipeable({\n    onSwipedLeft: () => {\n      if (activeTabIndex < categories.length - 1) {\n        handleTabChange(activeTabIndex + 1);\n      }\n    },\n    onSwipedRight: () => {\n      if (activeTabIndex > 0) {\n        handleTabChange(activeTabIndex - 1);\n      }\n    },\n    trackMouse: false\n  });\n\n  // 获取分类标题的国际化文本\n  const getCategoryTitle = (title: string) => {\n    // 获取标题的小写形式，便于比较\n    const lowerTitle = title.toLowerCase();\n    \n    // 安全获取翻译文本（防御性编程）\n    const typeText = translations.category_type ? translations.category_type.toLowerCase() : '';\n    const regionText = translations.category_region ? translations.category_region.toLowerCase() : '';\n    const yearText = translations.category_year ? translations.category_year.toLowerCase() : '';\n    \n    // 直接返回对应的translation值\n    if (lowerTitle === 'category' || lowerTitle === '类型' || (typeText && lowerTitle === typeText)) {\n      return translations.category_type || title;\n    }\n    \n    if (lowerTitle === 'region' || lowerTitle === '地区' || (regionText && lowerTitle === regionText)) {\n      return translations.category_region || title;\n    }\n    \n    if (lowerTitle === 'year' || lowerTitle === '年份' || lowerTitle === 'release_year' || (yearText && lowerTitle === yearText)) {\n      return translations.category_year || title;\n    }\n    \n    return title;\n  };\n  \n  // 获取对应筛选类型的激活ID\n  const getActiveId = (filterType: string): string => {\n    switch (filterType) {\n      case 'type':\n        return activeCategory;\n      case 'region':\n        return activeRegion;\n      case 'year':\n        return activeYear;\n      default:\n        return 'all';\n    }\n  };\n  \n  // 如果没有分类数据，显示一个空的容器\n  if (!categories || categories.length === 0) {\n    return <div className=\"category-tabs\"></div>;\n  }\n  \n  return (\n    <div className=\"category-tabs\">\n      {/* 顶部标签栏 */}\n      <div className=\"relative border-b border-gray-200 dark:border-gray-700\">\n        <div \n          ref={tabsRef}\n          className=\"flex overflow-x-auto hide-scrollbar px-4 gap-4 whitespace-nowrap\"\n        >\n          {categories.map((category, index) => (\n            <button\n              key={category.title}\n              className={`pb-1 px-1 text-sm font-medium transition-colors duration-200 ${\n                index === activeTabIndex\n                  ? `text-[${THEME_COLOR}] border-b-2 border-[${THEME_COLOR}]`\n                  : 'text-gray-600 dark:text-gray-400'\n              }`}\n              onClick={() => handleTabChange(index)}\n            >\n              {getCategoryTitle(category.title)}\n            </button>\n          ))}\n        </div>\n      </div>\n      \n      {/* 分类内容区域 */}\n      <div {...swipeHandlers} className=\"mt-2\">\n        {categories.map((category, tabIndex) => {\n          // 确定当前标签对应的过滤类型\n          const filterType = getFilterType(category.title);\n          const activeId = getActiveId(filterType);\n          \n          return (\n            <div\n              key={category.title}\n              className={`${tabIndex === activeTabIndex ? 'block' : 'hidden'}`}\n            >\n              <div className=\"flex flex-wrap px-4 gap-2 py-1\">\n                {category.items.map((item) => {\n                  const isActive = activeId === item.id;\n                  const themeColorRgb = '9,161,228'; // rgba(253,79,29,1)的RGB部分\n                  return (\n                    <button\n                      key={item.id}\n                      className={`px-3 py-1 text-xs rounded-full transition-colors duration-200 ${\n                        isActive\n                          ? `bg-neutral-300 font-bold text-[${THEME_COLOR}] dark:bg-neutral-700 dark:text-[rgba(${themeColorRgb},0.9)]`\n                          : 'bg-neutral-200 text-neutral-600 dark:bg-neutral-800 dark:text-gray-400'\n                      }`}\n                      onClick={() => handleCategoryChange(item.id, filterType)}\n                    >\n                      {item.name}\n                    </button>\n                  );\n                })}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1722, "column": 0}, "map": {"version":3,"sources":["file:///Users/michael/projects/ttys/src/app/components/videos/VideoCard.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useCallback } from 'react';\nimport Image from 'next/image';\nimport { useRouter } from 'next/navigation';\nimport { MdPlayCircleOutline } from 'react-icons/md';\nimport useAppStore from '@/app/store/useAppStore';\nimport type { VideoItem } from '@/app/types/video';\n\ninterface VideoCardProps {\n  video: VideoItem;\n  tabType: 'movie' | 'tv' | 'anime' | 'short-drama';\n  showDownloadTip?: () => void;\n  translations: Record<string, string>;\n  isFirstPage?: boolean;\n}\n\nfunction VideoCard({ video, tabType, showDownloadTip, translations, isFirstPage = false }: VideoCardProps) {\n  const router = useRouter();\n  const { addPlayHistory } = useAppStore();\n  const [imageError, setImageError] = useState(false);\n  \n  // 处理视频点击事件\n  const handleClick = useCallback(() => {\n    // 如果是短剧，显示下载提示\n    if (tabType === 'short-drama') {\n      showDownloadTip?.();\n      return;\n    }\n    \n    // 添加到播放历史\n    const historyItem = {\n      id: video.id,\n      title: video.title,\n      poster: video.cover, // 使用cover作为poster\n      category: video.category,\n      year: video.year,\n      region: video.region\n    };\n    \n    addPlayHistory(historyItem);\n    \n    // 导航到详情页面\n    router.push(`/detail/${video.id}`);\n  }, [video, tabType, showDownloadTip, router, addPlayHistory]);\n  \n  // 加载失败时的占位图\n  const onImageError = useCallback(() => {\n    setImageError(true);\n  }, []);\n  \n  const noImageText = translations.general_no_image || '无图片';\n  \n  return (\n    <div \n      className=\"video-card relative w-full pb-2 cursor-pointer\" \n      onClick={handleClick}\n    >\n      <div className=\"poster-wrapper relative aspect-[2/3] overflow-hidden rounded-lg mb-2 bg-gray-200 dark:bg-neutral-800\">\n        {!imageError ? (\n          <Image\n            src={video.cover} // 使用cover而不是poster\n            alt={video.title}\n            fill\n            sizes=\"(max-width: 768px) 33vw, 20vw\"\n            className=\"object-cover transition-transform duration-300 hover:scale-110\"\n            onError={onImageError}\n            priority={isFirstPage}\n            unoptimized={tabType === 'short-drama'}\n          />\n        ) : (\n          <div className=\"w-full h-full flex items-center justify-center bg-gray-300 dark:bg-gray-700\">\n            <span className=\"text-gray-500 dark:text-gray-400 text-sm\">{noImageText}</span>\n          </div>\n        )}\n        \n        {/* 播放按钮悬浮层 */}\n        <div className=\"play-overlay absolute inset-0 flex items-center justify-center opacity-0 bg-black bg-opacity-40 transition-opacity duration-300 hover:opacity-100\">\n          <MdPlayCircleOutline className=\"text-white text-5xl\" />\n        </div>\n      </div>\n      \n      {/* 视频标题 */}\n      <h3 className=\"text-sm font-medium truncate text-center\">\n        {video.title}\n      </h3>\n      \n    </div>\n  );\n}\n\n// 优化：使用 React.memo 包装组件\n// 添加自定义比较函数，只有当相关属性变化时才重新渲染\nexport default React.memo(VideoCard, (prevProps, nextProps) => {\n  return (\n    prevProps.video.id === nextProps.video.id &&\n    prevProps.tabType === nextProps.tabType &&\n    prevProps.isFirstPage === nextProps.isFirstPage &&\n    prevProps.translations.general_no_image === nextProps.translations.general_no_image\n  );\n}); "],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AACA;;;AANA;;;;;;AAiBA,SAAS,UAAU,EAAE,KAAK,EAAE,OAAO,EAAE,eAAe,EAAE,YAAY,EAAE,cAAc,KAAK,EAAkB;;IACvG,MAAM,SAAS,CAAA,GAAA,qIAAA,CAAA,YAAS,AAAD;IACvB,MAAM,EAAE,cAAc,EAAE,GAAG,CAAA,GAAA,qIAAA,CAAA,UAAW,AAAD;IACrC,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAE7C,WAAW;IACX,MAAM,cAAc,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;8CAAE;YAC9B,eAAe;YACf,IAAI,YAAY,eAAe;gBAC7B;gBACA;YACF;YAEA,UAAU;YACV,MAAM,cAAc;gBAClB,IAAI,MAAM,EAAE;gBACZ,OAAO,MAAM,KAAK;gBAClB,QAAQ,MAAM,KAAK;gBACnB,UAAU,MAAM,QAAQ;gBACxB,MAAM,MAAM,IAAI;gBAChB,QAAQ,MAAM,MAAM;YACtB;YAEA,eAAe;YAEf,UAAU;YACV,OAAO,IAAI,CAAC,CAAC,QAAQ,EAAE,MAAM,EAAE,EAAE;QACnC;6CAAG;QAAC;QAAO;QAAS;QAAiB;QAAQ;KAAe;IAE5D,YAAY;IACZ,MAAM,eAAe,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;+CAAE;YAC/B,cAAc;QAChB;8CAAG,EAAE;IAEL,MAAM,cAAc,aAAa,gBAAgB,IAAI;IAErD,qBACE,6LAAC;QACC,WAAU;QACV,SAAS;;0BAET,6LAAC;gBAAI,WAAU;;oBACZ,CAAC,2BACA,6LAAC,gIAAA,CAAA,UAAK;wBACJ,KAAK,MAAM,KAAK;wBAChB,KAAK,MAAM,KAAK;wBAChB,IAAI;wBACJ,OAAM;wBACN,WAAU;wBACV,SAAS;wBACT,UAAU;wBACV,aAAa,YAAY;;;;;6CAG3B,6LAAC;wBAAI,WAAU;kCACb,cAAA,6LAAC;4BAAK,WAAU;sCAA4C;;;;;;;;;;;kCAKhE,6LAAC;wBAAI,WAAU;kCACb,cAAA,6LAAC,iJAAA,CAAA,sBAAmB;4BAAC,WAAU;;;;;;;;;;;;;;;;;0BAKnC,6LAAC;gBAAG,WAAU;0BACX,MAAM,KAAK;;;;;;;;;;;;AAKpB;GAxES;;QACQ,qIAAA,CAAA,YAAS;QACG,qIAAA,CAAA,UAAW;;;KAF/B;2DA4EM,6JAAA,CAAA,UAAK,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW;IAC/C,OACE,UAAU,KAAK,CAAC,EAAE,KAAK,UAAU,KAAK,CAAC,EAAE,IACzC,UAAU,OAAO,KAAK,UAAU,OAAO,IACvC,UAAU,WAAW,KAAK,UAAU,WAAW,IAC/C,UAAU,YAAY,CAAC,gBAAgB,KAAK,UAAU,YAAY,CAAC,gBAAgB;AAEvF","debugId":null}},
    {"offset": {"line": 1871, "column": 0}, "map": {"version":3,"sources":["file:///Users/michael/projects/ttys/src/app/components/common/DownloadAppModal.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { IoCloseCircleOutline } from 'react-icons/io5';\nimport { FaDownload, FaApple, FaAndroid } from 'react-icons/fa';\n\nimport { DOWNLOAD_LINK, ANDROID_DOWNLOAD_LINK, IOS_DOWNLOAD_LINK } from '@/appConfig';\n\ninterface DownloadAppModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  translations: {\n    downloadTitle?: string;\n    downloadDesc?: string;\n    downloadBtn?: string;\n    cancelBtn?: string;\n    download_app_title?: string;\n    download_app_desc?: string;\n    download_app_btn?: string;\n    download_app_cancel?: string;\n    download_app_short_title?: string;\n    download_app_short_desc?: string;\n    download_app_detail_title?: string;\n    download_app_detail_desc?: string;\n    general_watch_now?: string;\n    general_hold?: string;\n    [key: string]: string | undefined;\n  };\n  appLink?: string;\n  videoTitle?: string;\n  modalType?: 'default' | 'short' | 'detail';\n}\n\n// 平台类型\ntype Platform = 'ios' | 'android' | 'unknown';\n\nexport default function DownloadAppModal({\n  isOpen,\n  onClose,\n  translations,\n  appLink,\n  videoTitle = '',\n  modalType = 'default'\n}: DownloadAppModalProps) {\n  // 平台状态\n  const [platform, setPlatform] = useState<Platform>('unknown');\n  const [downloadUrl, setDownloadUrl] = useState(DOWNLOAD_LINK);\n\n  // 检测用户平台\n  useEffect(() => {\n    const detectPlatform = (): Platform => {\n      const userAgent = navigator.userAgent || navigator.vendor || (window as any).opera || '';\n      \n      // iOS设备检测\n      if (/iPad|iPhone|iPod/.test(userAgent) && !(window as any).MSStream) {\n        return 'ios';\n      }\n      \n      // Android设备检测\n      if (/android/i.test(userAgent)) {\n        return 'android';\n      }\n      \n      return 'unknown';\n    };\n    \n    const detectedPlatform = detectPlatform();\n    setPlatform(detectedPlatform);\n    \n    // 根据平台设置下载链接\n    if (detectedPlatform === 'ios') {\n      setDownloadUrl(appLink || IOS_DOWNLOAD_LINK);\n    } else if (detectedPlatform === 'android') {\n      setDownloadUrl(appLink || ANDROID_DOWNLOAD_LINK);\n    } else {\n      setDownloadUrl(appLink || DOWNLOAD_LINK);\n    }\n  }, [appLink]);\n\n  if (!isOpen) return null;\n\n  // 根据modalType选择翻译键\n  let titleKey = 'download_app_title';\n  let descKey = 'download_app_desc';\n  \n  if (modalType === 'short') {\n    titleKey = 'download_app_short_title';\n    descKey = 'download_app_short_desc';\n  } else if (modalType === 'detail') {\n    titleKey = 'download_app_detail_title';\n    descKey = 'download_app_detail_desc';\n  }\n\n  // 从i18n获取文本，如果没有则使用自定义文本\n  const title = translations[titleKey] || translations.downloadTitle || '下载APP观看完整内容';\n  let desc = translations[descKey] || translations.downloadDesc || '安装APP即可观看全部高清视频，无广告，支持离线缓存';\n  \n  // 如果有视频标题，添加到描述中\n  if (videoTitle && modalType === 'detail') {\n    desc = desc.replace('{title}', videoTitle);\n  }\n  \n  const downloadBtn = translations.download_app_btn || translations.downloadBtn || '立即下载';\n  const cancelBtn = translations.download_app_cancel || translations.cancelBtn || '取消';\n\n  const handleDownload = () => {\n    window.open(downloadUrl, '_blank');\n  };\n\n  // 获取平台图标\n  const getPlatformIcon = () => {\n    if (platform === 'ios') {\n      return <FaApple className=\"text-lg mr-2\" />;\n    } else if (platform === 'android') {\n      return <FaAndroid className=\"text-lg mr-2\" />;\n    } else {\n      return <FaDownload className=\"text-lg mr-2\" />;\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\n      {/* 背景遮罩 */}\n      <div \n        className=\"absolute inset-0 bg-black bg-opacity-70\"\n        onClick={onClose}\n      ></div>\n      \n      {/* 弹框内容 - 修改宽度设置，确保不超过移动容器 */}\n      <div className=\"relative w-[90%] max-w-[300px] bg-white dark:bg-gray-800 rounded-lg shadow-xl overflow-hidden z-10\">\n        {/* 关闭按钮 */}\n        <button \n          onClick={onClose}\n          className=\"absolute top-3 right-3 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200\"\n        >\n          <IoCloseCircleOutline className=\"text-2xl\" />\n        </button>\n        \n        {/* 内容区域 */}\n        <div className=\"p-6\">\n          <h3 className=\"text-lg font-bold text-center mb-4\">{title}</h3>\n          \n          <div className=\"flex justify-center mb-4\">\n            <div className=\"w-16 h-16 rounded-full bg-blue-100 dark:bg-blue-900 flex items-center justify-center\">\n              {platform === 'ios' ? (\n                <FaApple className=\"text-3xl text-blue-500\" />\n              ) : platform === 'android' ? (\n                <FaAndroid className=\"text-3xl text-blue-500\" />\n              ) : (\n                <FaDownload className=\"text-2xl text-blue-500\" />\n              )}\n            </div>\n          </div>\n          \n          <p className=\"text-sm text-gray-600 dark:text-gray-300 text-center mb-6\">\n            {desc}\n          </p>\n          \n          <div className=\"flex flex-col gap-3\">\n            <button\n              onClick={handleDownload}\n              className=\"w-full py-2.5 bg-[rgb(9,161,228)] text-white rounded-full font-medium flex items-center justify-center\"\n            >\n              {getPlatformIcon()}\n              {downloadBtn}\n            </button>\n            \n            <button\n              onClick={onClose}\n              className=\"w-full py-2.5 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-200 rounded-full font-medium\"\n            >\n              {cancelBtn}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2115, "column": 0}, "map": {"version":3,"sources":["file:///Users/michael/projects/ttys/src/app/components/videos/VideoList.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport { MdRefresh } from 'react-icons/md';\nimport VideoCard from './VideoCard';\nimport type { VideoItem } from '@/app/types/video';\nimport { THEME_COLOR } from '@/appConfig';\nimport DownloadAppModal from '../common/DownloadAppModal';\n\ninterface VideoListProps {\n  videos: VideoItem[];\n  loadMore: () => void;\n  isLoading?: boolean;\n  isLoadingMore?: boolean;\n  isEmpty?: boolean;\n  hasError?: boolean;\n  hasMore?: boolean;\n  tabType: 'movie' | 'tv' | 'anime' | 'short-drama';\n  emptyMessage?: string;\n  translations: {\n    general_no_image?: string;\n    general_loading?: string;\n    general_net_fault?: string;\n    general_retry?: string;\n    general_watch_now?: string;\n    general_hold?: string;\n    [key: string]: string | undefined;\n  };\n  currentPage?: number;\n  itemsPerPage?: number;\n}\n\nfunction VideoList({ \n  videos = [], \n  loadMore, \n  isLoading = false,\n  isLoadingMore = false,\n  isEmpty = false,\n  hasError = false,\n  hasMore = true,\n  tabType,\n  emptyMessage = '没有找到相关视频',\n  translations,\n  currentPage = 0,\n  itemsPerPage = 24\n}: VideoListProps) {\n  const [showDownloadModal, setShowDownloadModal] = useState(false);\n  const observerRef = useRef<IntersectionObserver | null>(null);\n  const loadingRef = useRef<HTMLDivElement>(null);\n  const prevVideosLengthRef = useRef(videos.length);\n  const listRef = useRef<HTMLDivElement>(null);\n  \n  // 确保translations包含所有必需的翻译键\n  const enhancedTranslations = useMemo(() => ({\n    ...translations,\n    general_no_image: translations.general_no_image || '无图片',\n    general_loading: translations.general_loading || '加载中...',\n    general_net_fault: translations.general_net_fault || '网络错误',\n    general_retry: translations.general_retry || '重试'\n  }), [translations]);\n  \n  // 设置无限滚动\n  useEffect(() => {\n    if (!loadingRef.current) return;\n    \n    observerRef.current = new IntersectionObserver(\n      (entries) => {\n        if (entries[0].isIntersecting && !isLoading && !isLoadingMore && hasMore) {\n          loadMore();\n        }\n      },\n      { threshold: 0.1 }\n    );\n    \n    observerRef.current.observe(loadingRef.current);\n    \n    return () => {\n      if (observerRef.current) {\n        observerRef.current.disconnect();\n      }\n    };\n  }, [isLoading, isLoadingMore, hasMore, loadMore]);\n  \n  // 展示App下载提示\n  const showDownloadTip = useCallback(() => {\n    setShowDownloadModal(true);\n  }, []);\n  \n  // 关闭下载提示\n  const handleCloseDownloadModal = useCallback(() => {\n    setShowDownloadModal(false);\n  }, []);\n  \n  // 重试加载\n  const handleRetry = useCallback(() => {\n    loadMore();\n  }, [loadMore]);\n  \n  return (\n    <div className=\"video-list p-4\" ref={listRef}>\n      {/* 空状态 */}\n      {isEmpty && !isLoading && !hasError ? (\n        <div className=\"empty-state flex flex-col items-center justify-center py-12\">\n          <p className=\"text-gray-500 dark:text-gray-400\">{emptyMessage}</p>\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-3 gap-4\">\n          {videos.map((video, index) => (\n            <VideoCard \n              key={`${video.id}-${index}`} \n              video={video} \n              tabType={tabType}\n              showDownloadTip={showDownloadTip}\n              translations={enhancedTranslations}\n              isFirstPage={currentPage === 0 && index < itemsPerPage}\n            />\n          ))}\n        </div>\n      )}\n      \n      {/* 加载状态 */}\n      {(isLoading || isLoadingMore) && (\n        <div className=\"loading flex justify-center items-center p-4\">\n          <div className={`animate-spin rounded-full h-6 w-6 border-b-2 border-[${THEME_COLOR}]`}></div>\n          <span className=\"ml-2 text-gray-600 dark:text-gray-400\">{enhancedTranslations.general_loading}</span>\n        </div>\n      )}\n      \n      {/* 错误状态 */}\n      {hasError && (\n        <div className=\"error-state flex flex-col items-center justify-center py-4\">\n          <p className=\"text-red-500 dark:text-red-400 mb-2\">{enhancedTranslations.general_net_fault}</p>\n          <button \n            className={`flex items-center px-4 py-2 bg-[${THEME_COLOR}] text-white rounded-full`}\n            onClick={handleRetry}\n          >\n            <MdRefresh className=\"mr-1\" />\n            {enhancedTranslations.general_retry}\n          </button>\n        </div>\n      )}\n      \n      {/* 无限滚动触发器 */}\n      {hasMore && !hasError && (\n        <div ref={loadingRef} className=\"h-4 w-full\"></div>\n      )}\n      \n      {/* 下载APP弹框 */}\n      <DownloadAppModal \n        isOpen={showDownloadModal}\n        onClose={handleCloseDownloadModal}\n        translations={translations}\n        modalType={tabType === 'short-drama' ? 'short' : 'default'}\n      />\n    </div>\n  );\n}\n\nexport default React.memo(VideoList); "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2334, "column": 0}, "map": {"version":3,"sources":["file:///Users/michael/projects/ttys/src/app/components/videos/ClientVideoList.tsx"],"sourcesContent":["'use client';\n\nimport React, { useMemo, useCallback } from 'react';\nimport { MdOutlineSearch } from 'react-icons/md';\nimport { useRouter } from 'next/navigation';\nimport useAppStore from '@/app/store/useAppStore';\nimport { useVideoList } from '@/app/hooks/useVideoList';\nimport CategoryTabs from './CategoryTabs';\nimport VideoList from './VideoList';\nimport type { CategoryType } from '@/app/store/useAppStore';\nimport type { VideoItem } from '@/app/types/video';\n\ninterface ClientVideoListProps {\n  tabType: 'movie' | 'tv' | 'anime' | 'short-drama';\n  title: string;\n  categories: {\n    title: string;\n    items: CategoryType[];\n  }[];\n  translations: Record<string, string>;\n  initialData: {\n    videos: VideoItem[];\n    hasMore: boolean;\n    total: number;\n    isLoading: boolean;\n    isError: boolean;\n    error?: string;\n  };\n}\n\nfunction ClientVideoList({ \n  tabType, \n  title, \n  categories, \n  translations, \n  initialData \n}: ClientVideoListProps) {\n  const router = useRouter();\n  const { setCurrentTab, filter, settings } = useAppStore();\n  \n  // 使用 useMemo 缓存筛选条件，避免不必要的状态更新\n  const filters = useMemo(() => ({\n    type: filter.type || 'all',\n    region: filter.region || 'all',\n    year: filter.year || 'all'\n  }), [filter.type, filter.region, filter.year]);\n  \n  // 使用 useMemo 缓存 hook 参数对象，避免对象引用变化\n  const videoListParams = useMemo(() => ({\n    tabType, \n    filters,\n    initialData,\n    locale: settings.language\n  }), [tabType, filters, initialData, settings.language]);\n  \n  // 使用缓存的参数调用 hook\n  const { \n    videos, \n    hasMore, \n    isLoading, \n    isLoadingMore,\n    isEmpty,\n    error, \n    loadMore,\n    handleFilterChange,\n    currentPage\n  } = useVideoList(videoListParams);\n\n  // console.log('useVideoList');\n  \n  // 缓存搜索点击处理函数\n  const handleSearchClick = useCallback(() => {\n    router.push('/search');\n  }, [router]);\n  \n  // 缓存本地化标题获取函数\n  const getLocalizedTitle = useCallback(() => {\n    switch (tabType) {\n      case 'movie':\n        return translations.artTypeFilm;\n      case 'tv':\n        return translations.artTypeTeleplay;\n      case 'anime':\n        return translations.artTypeEntertainment;\n      case 'short-drama':\n        return translations.artTypeVariety;\n      default:\n        return title;\n    }\n  }, [tabType, translations, title]);\n  \n  // 使用 useMemo 缓存 VideoList 组件的 props\n  const videoListProps = useMemo(() => ({\n    videos,\n    loadMore,\n    isLoading,\n    isLoadingMore,\n    isEmpty,\n    hasError: !!error,\n    hasMore,\n    tabType,\n    emptyMessage: translations.main_noData,\n    translations,\n    currentPage: currentPage || 0\n  }), [videos, loadMore, isLoading, isLoadingMore, isEmpty, error, hasMore, tabType, translations, currentPage]);\n  \n  // 缓存 CategoryTabs 组件的 props\n  const categoryTabsProps = useMemo(() => ({\n    categories,\n    tabType,\n    translations\n  }), [categories, tabType, translations]);\n  \n  return (\n    <div className=\"video-list-page\">\n      {/* 顶部搜索栏 */}\n      <div className=\"sticky top-0 z-10 bg-white dark:bg-neutral-900 shadow-sm\">\n        <div className=\"flex items-center justify-between p-2\">\n          <h1 className=\"text-xl font-bold\">{getLocalizedTitle()}</h1>\n          <button \n            className=\"p-2 rounded-full bg-neutral-100 dark:bg-neutral-800\"\n            onClick={handleSearchClick}\n          >\n            <MdOutlineSearch size={20} />\n          </button>\n        </div>\n        \n        {/* 分类标签 */}\n        <CategoryTabs {...categoryTabsProps} />\n      </div>\n      \n      {/* 视频列表 */}\n      <VideoList {...videoListProps} />\n    </div>\n  );\n}\n\n// 使用 React.memo 包装组件，避免不必要的重渲染\nexport default React.memo(ClientVideoList); "],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AARA;;;;;;;;AA8BA,SAAS,gBAAgB,EACvB,OAAO,EACP,KAAK,EACL,UAAU,EACV,YAAY,EACZ,WAAW,EACU;;IACrB,MAAM,SAAS,CAAA,GAAA,qIAAA,CAAA,YAAS,AAAD;IACvB,MAAM,EAAE,aAAa,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,CAAA,GAAA,qIAAA,CAAA,UAAW,AAAD;IAEtD,+BAA+B;IAC/B,MAAM,UAAU,CAAA,GAAA,6JAAA,CAAA,UAAO,AAAD;4CAAE,IAAM,CAAC;gBAC7B,MAAM,OAAO,IAAI,IAAI;gBACrB,QAAQ,OAAO,MAAM,IAAI;gBACzB,MAAM,OAAO,IAAI,IAAI;YACvB,CAAC;2CAAG;QAAC,OAAO,IAAI;QAAE,OAAO,MAAM;QAAE,OAAO,IAAI;KAAC;IAE7C,mCAAmC;IACnC,MAAM,kBAAkB,CAAA,GAAA,6JAAA,CAAA,UAAO,AAAD;oDAAE,IAAM,CAAC;gBACrC;gBACA;gBACA;gBACA,QAAQ,SAAS,QAAQ;YAC3B,CAAC;mDAAG;QAAC;QAAS;QAAS;QAAa,SAAS,QAAQ;KAAC;IAEtD,iBAAiB;IACjB,MAAM,EACJ,MAAM,EACN,OAAO,EACP,SAAS,EACT,aAAa,EACb,OAAO,EACP,KAAK,EACL,QAAQ,EACR,kBAAkB,EAClB,WAAW,EACZ,GAAG,CAAA,GAAA,sIAAA,CAAA,eAAY,AAAD,EAAE;IAEjB,+BAA+B;IAE/B,aAAa;IACb,MAAM,oBAAoB,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;0DAAE;YACpC,OAAO,IAAI,CAAC;QACd;yDAAG;QAAC;KAAO;IAEX,cAAc;IACd,MAAM,oBAAoB,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;0DAAE;YACpC,OAAQ;gBACN,KAAK;oBACH,OAAO,aAAa,WAAW;gBACjC,KAAK;oBACH,OAAO,aAAa,eAAe;gBACrC,KAAK;oBACH,OAAO,aAAa,oBAAoB;gBAC1C,KAAK;oBACH,OAAO,aAAa,cAAc;gBACpC;oBACE,OAAO;YACX;QACF;yDAAG;QAAC;QAAS;QAAc;KAAM;IAEjC,oCAAoC;IACpC,MAAM,iBAAiB,CAAA,GAAA,6JAAA,CAAA,UAAO,AAAD;mDAAE,IAAM,CAAC;gBACpC;gBACA;gBACA;gBACA;gBACA;gBACA,UAAU,CAAC,CAAC;gBACZ;gBACA;gBACA,cAAc,aAAa,WAAW;gBACtC;gBACA,aAAa,eAAe;YAC9B,CAAC;kDAAG;QAAC;QAAQ;QAAU;QAAW;QAAe;QAAS;QAAO;QAAS;QAAS;QAAc;KAAY;IAE7G,4BAA4B;IAC5B,MAAM,oBAAoB,CAAA,GAAA,6JAAA,CAAA,UAAO,AAAD;sDAAE,IAAM,CAAC;gBACvC;gBACA;gBACA;YACF,CAAC;qDAAG;QAAC;QAAY;QAAS;KAAa;IAEvC,qBACE,6LAAC;QAAI,WAAU;;0BAEb,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAG,WAAU;0CAAqB;;;;;;0CACnC,6LAAC;gCACC,WAAU;gCACV,SAAS;0CAET,cAAA,6LAAC,iJAAA,CAAA,kBAAe;oCAAC,MAAM;;;;;;;;;;;;;;;;;kCAK3B,6LAAC,sJAAA,CAAA,UAAY;wBAAE,GAAG,iBAAiB;;;;;;;;;;;;0BAIrC,6LAAC,mJAAA,CAAA,UAAS;gBAAE,GAAG,cAAc;;;;;;;;;;;;AAGnC;GAzGS;;QAOQ,qIAAA,CAAA,YAAS;QACoB,qIAAA,CAAA,UAAW;QA4BnD,sIAAA,CAAA,eAAY;;;KApCT;2DA4GM,6JAAA,CAAA,UAAK,CAAC,IAAI,CAAC","debugId":null}}]
}